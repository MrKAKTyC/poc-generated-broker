// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	. "broker/pkg/model"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the catalog of services that the service broker offers
	// (GET /v2/catalog)
	CatalogGet(ctx echo.Context, params CatalogGetParams) error
	// deprovision a service instance
	// (DELETE /v2/service_instances/{instance_id})
	ServiceInstanceDeprovision(ctx echo.Context, instanceId string, params ServiceInstanceDeprovisionParams) error
	// get a service instance
	// (GET /v2/service_instances/{instance_id})
	ServiceInstanceGet(ctx echo.Context, instanceId string, params ServiceInstanceGetParams) error
	// update a service instance
	// (PATCH /v2/service_instances/{instance_id})
	ServiceInstanceUpdate(ctx echo.Context, instanceId string, params ServiceInstanceUpdateParams) error
	// provision a service instance
	// (PUT /v2/service_instances/{instance_id})
	ServiceInstanceProvision(ctx echo.Context, instanceId string, params ServiceInstanceProvisionParams) error
	// get the last requested operation state for service instance
	// (GET /v2/service_instances/{instance_id}/last_operation)
	ServiceInstanceLastOperationGet(ctx echo.Context, instanceId string, params ServiceInstanceLastOperationGetParams) error
	// deprovision a service binding
	// (DELETE /v2/service_instances/{instance_id}/service_bindings/{binding_id})
	ServiceBindingUnbinding(ctx echo.Context, instanceId string, bindingId string, params ServiceBindingUnbindingParams) error
	// get a service binding
	// (GET /v2/service_instances/{instance_id}/service_bindings/{binding_id})
	ServiceBindingGet(ctx echo.Context, instanceId string, bindingId string, params ServiceBindingGetParams) error
	// generate a service binding
	// (PUT /v2/service_instances/{instance_id}/service_bindings/{binding_id})
	ServiceBindingBinding(ctx echo.Context, instanceId string, bindingId string, params ServiceBindingBindingParams) error
	// get the last requested operation state for service binding
	// (GET /v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation)
	ServiceBindingLastOperationGet(ctx echo.Context, instanceId string, bindingId string, params ServiceBindingLastOperationGetParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CatalogGet converts echo context to params.
func (w *ServerInterfaceWrapper) CatalogGet(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CatalogGetParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CatalogGet(ctx, params)
	return err
}

// ServiceInstanceDeprovision converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceInstanceDeprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceInstanceDeprovisionParams
	// ------------- Required query parameter "service_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_id", ctx.QueryParams(), &params.ServiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_id: %s", err))
	}

	// ------------- Required query parameter "plan_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "plan_id", ctx.QueryParams(), &params.PlanId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plan_id: %s", err))
	}

	// ------------- Optional query parameter "accepts_incomplete" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepts_incomplete", ctx.QueryParams(), &params.AcceptsIncomplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepts_incomplete: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceInstanceDeprovision(ctx, instanceId, params)
	return err
}

// ServiceInstanceGet converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceInstanceGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceInstanceGetParams
	// ------------- Optional query parameter "service_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_id", ctx.QueryParams(), &params.ServiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_id: %s", err))
	}

	// ------------- Optional query parameter "plan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "plan_id", ctx.QueryParams(), &params.PlanId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plan_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceInstanceGet(ctx, instanceId, params)
	return err
}

// ServiceInstanceUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceInstanceUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceInstanceUpdateParams
	// ------------- Optional query parameter "accepts_incomplete" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepts_incomplete", ctx.QueryParams(), &params.AcceptsIncomplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepts_incomplete: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceInstanceUpdate(ctx, instanceId, params)
	return err
}

// ServiceInstanceProvision converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceInstanceProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceInstanceProvisionParams
	// ------------- Optional query parameter "accepts_incomplete" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepts_incomplete", ctx.QueryParams(), &params.AcceptsIncomplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepts_incomplete: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceInstanceProvision(ctx, instanceId, params)
	return err
}

// ServiceInstanceLastOperationGet converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceInstanceLastOperationGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceInstanceLastOperationGetParams
	// ------------- Optional query parameter "service_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_id", ctx.QueryParams(), &params.ServiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_id: %s", err))
	}

	// ------------- Optional query parameter "plan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "plan_id", ctx.QueryParams(), &params.PlanId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plan_id: %s", err))
	}

	// ------------- Optional query parameter "operation" -------------

	err = runtime.BindQueryParameter("form", true, false, "operation", ctx.QueryParams(), &params.Operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceInstanceLastOperationGet(ctx, instanceId, params)
	return err
}

// ServiceBindingUnbinding converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceBindingUnbinding(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	// ------------- Path parameter "binding_id" -------------
	var bindingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "binding_id", runtime.ParamLocationPath, ctx.Param("binding_id"), &bindingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter binding_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceBindingUnbindingParams
	// ------------- Required query parameter "service_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_id", ctx.QueryParams(), &params.ServiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_id: %s", err))
	}

	// ------------- Required query parameter "plan_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "plan_id", ctx.QueryParams(), &params.PlanId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plan_id: %s", err))
	}

	// ------------- Optional query parameter "accepts_incomplete" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepts_incomplete", ctx.QueryParams(), &params.AcceptsIncomplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepts_incomplete: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceBindingUnbinding(ctx, instanceId, bindingId, params)
	return err
}

// ServiceBindingGet converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceBindingGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	// ------------- Path parameter "binding_id" -------------
	var bindingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "binding_id", runtime.ParamLocationPath, ctx.Param("binding_id"), &bindingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter binding_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceBindingGetParams
	// ------------- Optional query parameter "service_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_id", ctx.QueryParams(), &params.ServiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_id: %s", err))
	}

	// ------------- Optional query parameter "plan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "plan_id", ctx.QueryParams(), &params.PlanId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plan_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceBindingGet(ctx, instanceId, bindingId, params)
	return err
}

// ServiceBindingBinding converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceBindingBinding(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	// ------------- Path parameter "binding_id" -------------
	var bindingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "binding_id", runtime.ParamLocationPath, ctx.Param("binding_id"), &bindingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter binding_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceBindingBindingParams
	// ------------- Optional query parameter "accepts_incomplete" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepts_incomplete", ctx.QueryParams(), &params.AcceptsIncomplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepts_incomplete: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}
	// ------------- Optional header parameter "X-Broker-API-Originating-Identity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Originating-Identity")]; found {
		var XBrokerAPIOriginatingIdentity OriginatingIdentity
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Originating-Identity, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Originating-Identity", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIOriginatingIdentity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Originating-Identity: %s", err))
		}

		params.XBrokerAPIOriginatingIdentity = &XBrokerAPIOriginatingIdentity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceBindingBinding(ctx, instanceId, bindingId, params)
	return err
}

// ServiceBindingLastOperationGet converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceBindingLastOperationGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instance_id" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instance_id", runtime.ParamLocationPath, ctx.Param("instance_id"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instance_id: %s", err))
	}

	// ------------- Path parameter "binding_id" -------------
	var bindingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "binding_id", runtime.ParamLocationPath, ctx.Param("binding_id"), &bindingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter binding_id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceBindingLastOperationGetParams
	// ------------- Optional query parameter "service_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_id", ctx.QueryParams(), &params.ServiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_id: %s", err))
	}

	// ------------- Optional query parameter "plan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "plan_id", ctx.QueryParams(), &params.PlanId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plan_id: %s", err))
	}

	// ------------- Optional query parameter "operation" -------------

	err = runtime.BindQueryParameter("form", true, false, "operation", ctx.QueryParams(), &params.Operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Broker-API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Broker-API-Version")]; found {
		var XBrokerAPIVersion APIVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Broker-API-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Broker-API-Version", runtime.ParamLocationHeader, valueList[0], &XBrokerAPIVersion)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Broker-API-Version: %s", err))
		}

		params.XBrokerAPIVersion = XBrokerAPIVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Broker-API-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceBindingLastOperationGet(ctx, instanceId, bindingId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/catalog", wrapper.CatalogGet)
	router.DELETE(baseURL+"/v2/service_instances/:instance_id", wrapper.ServiceInstanceDeprovision)
	router.GET(baseURL+"/v2/service_instances/:instance_id", wrapper.ServiceInstanceGet)
	router.PATCH(baseURL+"/v2/service_instances/:instance_id", wrapper.ServiceInstanceUpdate)
	router.PUT(baseURL+"/v2/service_instances/:instance_id", wrapper.ServiceInstanceProvision)
	router.GET(baseURL+"/v2/service_instances/:instance_id/last_operation", wrapper.ServiceInstanceLastOperationGet)
	router.DELETE(baseURL+"/v2/service_instances/:instance_id/service_bindings/:binding_id", wrapper.ServiceBindingUnbinding)
	router.GET(baseURL+"/v2/service_instances/:instance_id/service_bindings/:binding_id", wrapper.ServiceBindingGet)
	router.PUT(baseURL+"/v2/service_instances/:instance_id/service_bindings/:binding_id", wrapper.ServiceBindingBinding)
	router.GET(baseURL+"/v2/service_instances/:instance_id/service_bindings/:binding_id/last_operation", wrapper.ServiceBindingLastOperationGet)

}
